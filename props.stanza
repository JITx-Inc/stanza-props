;; See license.txt for details about licensing.

defpackage props :
  import core
  import collections
  import utils

public deftype Prop<T>
public defmulti name<?T> (p:Prop<?T>) -> String
public defmulti scan<?T> (p:Prop<?T>, str:String) -> T
public defmulti post<?T> (p:Prop<?T>) -> String
public defmulti incr<?T> (p:Prop<?T>) -> T
public defmulti decr<?T> (p:Prop<?T>) -> T
public defmulti pull<?T> (p:Prop<?T>) -> T
public defmulti push<?T> (p:Prop<?T>, v:T) -> T
public defmulti subs<?T> (p:Prop<?T>) -> Vector<((Prop<T>) -> False)>

defn setter-of<T,S> (f:((T) -> False)) -> ((Prop<S>, T) -> T) :
  fn (p:Prop<S>, x:T) -> T :
    f(x)
    for sub in subs(p) do : sub(p) ;; PUBLISH TO SUBSCRIBERS
    x

public deftype CharProp <: Prop<Char>

defn min-or<?T> (a:False|(T&Comparable), b:?T&Comparable) -> T : min(default<T&Comparable>(a, b), b)
defn max-or<?T> (a:False|(T&Comparable), b:?T&Comparable) -> T : max(default<T&Comparable>(a, b), b)

public defn CharProp (name:String, getter:() -> Char, _setter:(Char) -> False, delta:Int, _minv:False|Char, _maxv:False|Char) :
  val subs = Vector<((Prop<Char>) -> False)>()
  val setter = setter-of<Char,Char>(_setter)
  val [minv, maxv] = [default<Char>(_minv, to-char(0)), default<Char>(_maxv, to-char(255))]
  new CharProp :
    defmethod name (this) -> String : name
    defmethod scan (this, str:String) -> Char : setter(this, str[0])
    defmethod post (this) -> String : to-string(getter())
    defmethod incr (this) -> Char: setter(this, to-char(min(to-int(maxv), to-int(getter()) + delta)))
    defmethod decr (this) -> Char: setter(this, to-char(max(to-int(minv), to-int(getter()) - delta)))
    defmethod pull (this) -> Char: getter()
    defmethod push (this, v:Char) -> Char: setter(this, v)
    defmethod subs (this) : subs

public defn CharProp (name:String, getter:() -> Char, setter:(Char) -> False) -> CharProp :
  CharProp(name, getter, setter, 1, false, false)

public deftype IntProp <: Prop<Int>

public defn IntProp (name:String, getter:() -> Int, _setter:(Int) -> False, delta:Int, minv:False|Int, maxv:False|Int) :
  val setter = setter-of<Int,Int>(_setter)
  val subs = Vector<((Prop<Int>) -> False)>()
  new IntProp :
    defmethod name (this) -> String : name
    defmethod scan (this, str:String) -> Int :
      match(to-int(str)) :
        (f:False) : -1
        (i:Int) : setter(this, i)
    defmethod post (this) -> String : to-string(getter())
    defmethod incr (this) -> Int: setter(this, min-or(maxv, getter() + delta))
    defmethod decr (this) -> Int: setter(this, max-or(minv, getter() - delta))
    defmethod pull (this) -> Int: getter()
    defmethod push (this, v:Int) -> Int: setter(this, v)
    defmethod subs (this) : subs

public defn IntProp (name:String, getter:() -> Int, setter:(Int) -> False) -> IntProp :
  IntProp(name, getter, setter, 1, false, false)

public deftype LongProp <: Prop<Long>

public defn LongProp (name:String, getter:() -> Long, _setter:(Long) -> False, delta:Long, minv:False|Long, maxv:False|Long) :
  val setter = setter-of<Long,Long>(_setter)
  val subs = Vector<((Prop<Long>) -> False)>()
  new LongProp :
    defmethod name (this) -> String : name
    defmethod scan (this, str:String) -> Long :
      match(to-long(str)) :
        (f:False) : -1L
        (i:Long) : setter(this, i)
    defmethod post (this) -> String : to-string(getter())
    defmethod incr (this) -> Long: setter(this, min-or(maxv, getter() + delta))
    defmethod decr (this) -> Long: setter(this, max-or(minv, getter() - delta))
    defmethod pull (this) -> Long: getter()
    defmethod push (this, v:Long) -> Long: setter(this, v)
    defmethod subs (this) : subs

public defn LongProp (name:String, getter:() -> Long, setter:(Long) -> False) -> LongProp :
  LongProp(name, getter, setter, 0L, false, false)

public deftype FloatProp <: Prop<Float>

public defn FloatProp (name:String, getter:() -> Float, _setter:(Float) -> False, delta:Float, minv:False|Float, maxv:False|Float) :
  val setter = setter-of<Float,Float>(_setter)
  val subs = Vector<((Prop<Float>) -> False)>()
  new FloatProp :
    defmethod name (this) -> String : name
    defmethod scan (this, str:String) -> Float :
      match(to-float(str)) :
        (f:False) : -1.0f
        (x:Float) : setter(this, x)
    defmethod post (this) -> String : to-string(getter())
    defmethod incr (this) -> Float: setter(this, min-or(maxv, getter() + delta))
    defmethod decr (this) -> Float: setter(this, max-or(minv, getter() - delta))
    defmethod pull (this) -> Float: getter()
    defmethod push (this, v:Float) -> Float: setter(this, v)
    defmethod subs (this) : subs

public defn FloatProp (name:String, getter:() -> Float, setter:(Float) -> False) -> FloatProp :
  FloatProp(name, getter, setter, 1.0f, false, false)

public deftype StringProp <: Prop<String>

public defn StringProp (name:String, getter:() -> String, _setter:(String) -> False) :
  val setter = setter-of<String,String>(_setter)
  val subs = Vector<((Prop<String>) -> False)>()
  new StringProp :
    defmethod name (this) -> String : name
    defmethod scan (this, str:String) -> String : setter(this, str)
    defmethod post (this) -> String : getter()
    defmethod incr (this) -> String: getter()
    defmethod decr (this) -> String: getter()
    defmethod pull (this) -> String: getter()
    defmethod push (this, v:String) -> String: setter(this, v)
    defmethod subs (this) : subs

deftype EnumProp <: Prop<Symbol>

public defn EnumProp (name:String, getter:() -> Symbol, _setter:(Symbol) -> False, choices:Tuple<Symbol>) :
  val size = length(choices)
  defn mod (i:Int) -> Int : (i + size) % size
  defn lim (i:Int) -> Int : min(size - 1, max(0, i))
  val setter = setter-of<Symbol,Symbol>(_setter)
  defn lookup (s:Symbol) -> Int : default<Int>(index-of(choices, s), 0)
  val subs = Vector<((Prop<Symbol>) -> False)>()
  new EnumProp :
    defmethod name (this) -> String : name
    defmethod scan (this, str:String) -> Symbol : setter(this, choices[lookup(to-symbol $ str)])
    defmethod post (this) -> String : to-string(getter())
    defmethod incr (this) -> Symbol: setter(this, choices[mod(lookup(getter()) + 1)])
    defmethod decr (this) -> Symbol: setter(this, choices[mod(lookup(getter()) - 1)])
    defmethod pull (this) -> Symbol: getter()
    defmethod push (this, v:Symbol) -> Symbol: setter(this, v)
    defmethod subs (this) : subs

public deftype BoolProp <: Prop<True|False>

public defn BoolProp (name:String, getter:() -> True|False, _setter:(True|False) -> False) :
  val setter = setter-of<True|False,True|False>(_setter)
  val subs = Vector<((Prop<True|False>) -> False)>()
  new BoolProp :
    defmethod name (this) -> String : name
    defmethod scan (this, str:String) -> True|False : setter(this, str == "true")
    defmethod post (this) -> String : to-string(getter())
    defmethod incr (this) -> True|False: setter(this, not getter())
    defmethod decr (this) -> True|False: incr(this)
    defmethod pull (this) -> True|False: getter()
    defmethod push (this, v:True|False) -> True|False: setter(this, v)
    defmethod subs (this) : subs

public deftype Props
public defmulti elts (prop:Props) -> Vector<Prop>

public defn Props () :
  val elts = Vector<Prop>()
  new Props :
    defmethod elts (this) : elts

public defn install (props:Props, prop:Prop) -> Prop :
  add(elts(props), prop)
  prop

defn parse-args-to-cmds (args:Seq<String>) -> Seqable<Tuple<String>> :
  next(args)
  generate<Tuple<String>> :
    defn keyword? (s:String) -> True|False : length(s) > 2 and s[0] == '-' and s[1] == '-' 
    defn chop-keyword (s:String) -> String : s[2 to false]
    defn* loop (i:Int, cmd:List<String>) :
      if empty?(args) :
        if not empty?(cmd) :
          yield(to-tuple $ reverse $ cmd)
      else :
        val s  = next(args)
        val k? = keyword?(s)
        val a  = chop-keyword(s) when k? else s
        if k? and i > 0:
          yield(to-tuple $ reverse $ cmd)
          loop(i + 1, List(a))
        else :
          loop(i + 1, cons(a, cmd))
    loop(0, List())

defn parse-arg (props:Props, cmd:Tuple<String>) -> Int :
  label<Int> return :
    val keyword = cmd[0]
    for prop in elts(props) do :
      if matches?(keyword, 0, name(prop)) :
        val arg = "true" when length(cmd) == 1 else cmd[1]
        val x = scan(prop, arg)
        ;; if scan(prop, arg) == false :
        ;;   println-all(["Unable to process property " s " on " arg])
        ;;   return(0)
        return(1)
    return(0)

public defn parse-args (props:Props, args:Seqable<String>) -> Int :
  var c = 0
  val cmds = to-tuple $ parse-args-to-cmds(to-seq $ args)
  for cmd in cmds do :
    c = c + parse-arg(props, cmd)
  c
